version: 0.2

phases:
  install:
    run-as: root
    on-failure: ABORT
    runtime-versions:
      python: 3.12
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    on-failure: ABORT
    commands:
      - |
        aws ecr get-login-password --region $AWS_DEFAULT_REGION \
        | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    on-failure: ABORT
    commands:
      - EPOCH_TAG=$(date +%s)
      - REGISTRY_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      - IMAGE_URI="${REGISTRY_URL}/${SERVICE_NAME}-${ENVIRONMENT}"
      - docker build . -t "${SERVICE_NAME}-${ENVIRONMENT}"
      - docker tag "${SERVICE_NAME}-${ENVIRONMENT}:latest" "${IMAGE_URI}:latest"
      - docker tag "${SERVICE_NAME}-${ENVIRONMENT}:latest" "${IMAGE_URI}:${EPOCH_TAG}"
  post_build:
    on-failure: ABORT
    commands:
      - docker push "${IMAGE_URI}" --all-tags
      - |
        imagedefinitions=$(jq -n \
          --arg container_name ${SERVICE_NAME} \
          --arg image "${IMAGE_URI}:${EPOCH_TAG}" \
          '[{"name":$container_name,"imageUri":$image}]'
        )
      - echo $imagedefinitions >> imagedefinitions.json
#      - printf '[{"name":"hello-world","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json
