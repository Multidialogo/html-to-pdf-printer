AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  RulePriority:
    Type: Number

  HostedZoneId:
    Type: String

  Domain:
    Type: String

  EFSMountPath:
    Type: String

  FileSystemId:
    Type: String

  FunctionName:
    Type: String

  Environment:
    Type: String

  Memory:
    Type: String

  RestApiId:
    Type: String

  RootResourceId:
    Type: String

  Subnets:
    Type: CommaDelimitedList

  Timeout:
    Type: String

  VPCCidr:
    Type: String

  VPCID:
    Type: String

  VPCEndpointHostedZoneID:
    Type: String

  VPCEndpointRegionalDNSEntry:
    Type: String

Conditions:

  IsProduction: !Equals
    - !Ref Environment
    - prod

Resources:

  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemId
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: 755
        Path: '/'
      AccessPointTags:
        - Key: Name
          Value: !Sub '${FunctionName}-${Environment}'
        - Key: path
          Value: /

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable VPC access to the lambda function.
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref VPCCidr

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      RetentionInDays: 30

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NetworkInterfacePermission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateNetworkInterface*
                  - ec2:DeleteNetworkInterface*
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyNetworkInterface*
                Resource: '*'
        - PolicyName: EFSAccessPermission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:DescribeMountTargets
                Resource: '*'

  Function:
    DependsOn:
      - SecurityGroup
      - FunctionRole
      - AccessPoint
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          EFS_MOUNT_PATH: !Ref EFSMountPath
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: !Ref EFSMountPath
      FunctionName: !Sub '${FunctionName}-${Environment}'
      LoggingConfig:
        LogGroup: !Ref LogGroup
      MemorySize: !Ref Memory
      PackageType: Image
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds: !Ref Subnets
    Metadata:
      DockerTag: !Ref Environment
      DockerContext: ./
      Dockerfile: Dockerfile
      DockerBuildArgs:
        EFS_MOUNT_PATH: !Ref EFSMountPath
        DEV: !If
          - IsProduction
          - 'false'
          - 'true'

  Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RootResourceId
      PathPart: 'download'
      RestApiId: !Ref RestApiId

  Method:
    DependsOn:
      - Function
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations'
      ResourceId: !Ref Resource
      RestApiId: !Ref RestApiId

  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Function.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiId}/*/*/*'

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub '${FunctionName}-${Environment}.${Domain}'
      AliasTarget:
        DNSName: !Ref VPCEndpointRegionalDNSEntry
        HostedZoneId: !Ref VPCEndpointHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Type: A

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Sub '${FunctionName}-${Environment}'

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RestApiId
          Stage: !Ref Environment
      UsagePlanName: !Sub '${FunctionName}-${Environment}'

  UsagePlanKey:
    DependsOn:
      - UsagePlan
      - ApiKey
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan
